{
  "name": "NDA Analysis Workflow v3 - Simplified",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "nda-analysis",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d1e51c9f-4c77-4d1a-8e1e-6c4c2e8b3a9f",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "nda-analysis"
    },
    {
      "parameters": {
        "functionCode": "// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ - —Ç–µ–∫—Å—Ç —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\nconst { extractedText, filename, inn, companyName, mimeType } = $input.first().json;\n\nconsole.log('üìÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {\n  filename,\n  inn, \n  companyName,\n  textLength: extractedText?.length || 0\n});\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\nif (!extractedText || extractedText.length < 10) {\n  throw new Error('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');\n}\n\nreturn {\n  json: {\n    extractedText: extractedText,\n    filename: filename,\n    inn: inn,\n    companyName: companyName,\n    mimeType: mimeType\n  }\n};"
      },
      "id": "f2a8b3c4-5d6e-7f8g-9h0i-1j2k3l4m5n6o",
      "name": "Prepare Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "headerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type", 
              "value": "application/json"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-5-sonnet-20241022"
            },
            {
              "name": "max_tokens",
              "value": "2000"
            },
            {
              "name": "temperature",
              "value": "0"
            },
            {
              "name": "system",
              "value": "–¢—ã —é—Ä–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É NDA. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –†–ï–ê–õ–¨–ù–û –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.\\n\\nüö´ –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:\\n- –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã\\n- –î–æ–¥—É–º—ã–≤–∞—Ç—å –ø—É–Ω–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç\\n- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ\\n- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ - –ù–ï —Å—á–∏—Ç–∞–π —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º\\n\\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–£–ù–ö–¢–´ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ø–í–ù–û —É–∫–∞–∑–∞–Ω—ã):\\n- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ë–û–õ–ï–ï 5 –ª–µ—Ç\\n- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –°–í–´–®–ï 1,000,000 —Ä—É–±–ª–µ–π\\n- –û–î–ù–û–°–¢–û–†–û–ù–ù–ò–ï –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É)\\n- –ó–∞–ø—Ä–µ—Ç –Ω–∞ –Ω–∞—ë–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\\n- –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\\n- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\\n\\n–°–¢–ê–ù–î–ê–†–¢–ù–´–ï –£–°–õ–û–í–ò–Ø (–ù–ï –∫—Ä–∏—Ç–∏—á–Ω—ã):\\n- –°—Ä–æ–∫ 1-5 –ª–µ—Ç\\n- –í–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\\n- –í–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ/–ø—Ä—è–º–æ–≥–æ —É—â–µ—Ä–±–∞\\n- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\\n- –¶–µ–ª—å: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∏–ª–æ—Ç, –æ—Ü–µ–Ω–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\\n- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\\n\\n‚úÖ –ü–†–ò–ú–ï–†–´ –î–õ–Ø –ê–í–¢–û–°–û–ì–õ–ê–°–û–í–ê–ù–ò–Ø:\\n- \\\"–¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –≥–æ–¥–∞\\\" + \\\"–≤–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\\\" + \\\"–≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞\\\" = APPROVE\\n- \\\"—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\\\" + —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è = APPROVE\\n\\n–í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON:\\n{\\n  \\\"status\\\": \\\"approve\\\" | \\\"critical\\\",\\n  \\\"confidence\\\": 0.90,\\n  \\\"summary\\\": \\\"–ö—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• —Ñ–∞–∫—Ç–æ–≤\\\",\\n  \\\"keyPoints\\\": [\\\"–¢–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –†–ï–ê–õ–¨–ù–û –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ\\\"],\\n  \\\"criticalIssues\\\": [\\\"–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –†–ï–ê–õ–¨–ù–û –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã\\\"],\\n  \\\"recommendations\\\": [\\\"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–Ω–∫—Ç–∞—Ö\\\"]\\n}"
            },
            {
              "name": "messages",
              "value": "={{ JSON.stringify([{\n  role: 'user',\n  content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π NDA –¥–æ–∫—É–º–µ–Ω—Ç. –£–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞.\\n\\n–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:\\n${$json.extractedText}\\n\\n–ö–æ–º–ø–∞–Ω–∏—è: ${$json.companyName}\\n–ò–ù–ù: ${$json.inn}\\n\\n–í–ê–ñ–ù–û: –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (3 –≥–æ–¥–∞, –≤–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ), —Ç–æ status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'approve'.`\n}]) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b9c0d1e2-3f4g-5h6i-7j8k-9l0m1n2o3p4q",
      "name": "Claude API Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "claude-api-key",
          "name": "Claude API Key"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Claude API\nconst claudeResponse = $input.first().json.content[0].text;\nconst originalText = $('Prepare Data').first().json.extractedText.toLowerCase();\n\ntry {\n  // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç Claude\n  const jsonMatch = claudeResponse.match(/\\{[\\s\\S]*\\}/);\n  if (!jsonMatch) {\n    throw new Error('JSON not found in Claude response');\n  }\n  \n  const analysisResult = JSON.parse(jsonMatch[0]);\n  \n  // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ò ===\n  let validationScore = 1.0;\n  const warnings = [];\n  const corrections = [];\n  \n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n  const termMentions = analysisResult.keyPoints.filter(point => \n    point.match(/—Å—Ä–æ–∫.*?(\\d+).*?(–ª–µ—Ç|–≥–æ–¥)/i)\n  );\n  \n  if (termMentions.length > 0) {\n    const mentionedTerm = termMentions[0].match(/(\\d+)/)?.[1];\n    const realTerm = originalText.match(/(\\d+)\\s*\\([^)]*\\)\\s*(–ª–µ—Ç|–≥–æ–¥)/i)?.[1];\n    \n    if (mentionedTerm && mentionedTerm !== realTerm) {\n      warnings.push(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–æ–∫–∞: —É–∫–∞–∑–∞–Ω–æ ${mentionedTerm}, –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ ${realTerm || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);\n      validationScore -= 0.3;\n      \n      if (realTerm) {\n        corrections.push(`–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫: ${realTerm} –ª–µ—Ç`);\n      }\n    }\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –®—Ç—Ä–∞—Ñ—ã –∏ —Å–∞–Ω–∫—Ü–∏–∏\n  const penaltyMentions = analysisResult.keyPoints.filter(point => \n    point.match(/—à—Ç—Ä–∞—Ñ.*?(\\d{1,3}[,.]?\\d{3}[,.]?\\d{3})|–º–ª–Ω.*?—Ä—É–±|\\$\\d+/i)\n  );\n  \n  if (penaltyMentions.length > 0) {\n    const hasFixedPenalties = originalText.match(/—à—Ç—Ä–∞—Ñ.*?\\d+|—à—Ç—Ä–∞—Ñ.*?–º–ª–Ω|—à—Ç—Ä–∞—Ñ.*?\\$/i);\n    const hasOnlyDamages = originalText.includes('—É—â–µ—Ä–±') && !hasFixedPenalties;\n    \n    if (hasOnlyDamages) {\n      warnings.push('–£–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã, –Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Ç–æ–ª—å–∫–æ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞');\n      validationScore -= 0.4;\n      corrections.push('–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞');\n    }\n  }\n  \n  // === –ö–û–†–†–ï–ö–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===\n  if (validationScore < 0.6 && analysisResult.status === 'critical') {\n    console.log('–ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é: –º–Ω–æ–≥–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ approve');\n    \n    analysisResult.status = 'approve';\n    analysisResult.summary = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ NDA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞. –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';\n    analysisResult.criticalIssues = [];\n    analysisResult.confidence = Math.min(analysisResult.confidence, 0.75);\n    \n    analysisResult.keyPoints = [\n      '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 3 –≥–æ–¥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ)',\n      '–í–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', \n      '–¶–µ–ª—å: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',\n      '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',\n      '–í–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞'\n    ];\n    \n    analysisResult.recommendations = [];\n    corrections.push('–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å critical –Ω–∞ approve –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');\n  }\n  \n  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\n  const result = {\n    ...analysisResult,\n    processedAt: new Date().toISOString(),\n    inn: $('Prepare Data').first().json.inn,\n    companyName: $('Prepare Data').first().json.companyName,\n    filename: $('Prepare Data').first().json.filename,\n    validation: {\n      score: validationScore,\n      warnings: warnings,\n      corrections: corrections,\n      verified: validationScore >= 0.8\n    }\n  };\n  \n  console.log('Validation complete:', {\n    score: validationScore,\n    warnings: warnings.length,\n    corrections: corrections.length,\n    finalStatus: result.status\n  });\n  \n  return { json: result };\n  \n} catch (error) {\n  console.error('Validation error:', error);\n  \n  return {\n    json: {\n      status: 'critical',\n      confidence: 0.3,\n      summary: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AI. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.',\n      keyPoints: ['–î–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'],\n      criticalIssues: ['–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏'],\n      recommendations: ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é'],\n      error: error.message,\n      processedAt: new Date().toISOString(),\n      inn: $('Prepare Data').first().json.inn,\n      companyName: $('Prepare Data').first().json.companyName,\n      filename: $('Prepare Data').first().json.filename,\n      validation: {\n        score: 0,\n        warnings: ['–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'],\n        verified: false\n      }\n    }\n  };\n}"
      },
      "id": "validation-node-id",
      "name": "Validate Analysis Result", 
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.status }}",
              "value2": "critical"
            }
          ]
        }
      },
      "id": "e3f4g5h6-7i8j-9k0l-1m2n-3o4p5q6r7s8t",
      "name": "Check if Critical",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.telegram.org/bot' + $env.TELEGRAM_BOT_TOKEN + '/sendMessage' }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $env.TELEGRAM_CHANNEL_ID }}"
            },
            {
              "name": "text",
              "value": "‚úÖ *NDA –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ*\\n\\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* {{ $json.companyName }}\\nüè¢ *–ò–ù–ù:* {{ $json.inn }}\\nüìÑ *–î–æ–∫—É–º–µ–Ω—Ç:* {{ $json.filename }}\\nüìÖ *–î–∞—Ç–∞:* {{ $json.processedAt }}\\n\\n*–ó–∞–∫–ª—é—á–µ–Ω–∏–µ AI:*\\n{{ $json.summary }}\\n\\n*–ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:*\\n{{ $json.keyPoints.map(point => `‚Ä¢ ${point}`).join('\\n') }}\\n\\n*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI:* {{ Math.round($json.confidence * 100) }}%"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        },
        "options": {}
      },
      "id": "auto-approve-telegram",
      "name": "Send Auto-Approved to TG Channel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "functionCode": "// –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ NDA\nconst result = $input.first().json;\n\nconsole.log('Critical NDA detected:', {\n  company: result.companyName,\n  inn: result.inn,\n  issues: result.criticalIssues\n});\n\nreturn { json: result };"
      },
      "id": "k9l0m1n2-3o4p-5q6r-7s8t-9u0v1w2x3y4z",
      "name": "Log Critical NDA",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "m1n2o3p4-5q6r-7s8t-9u0v-1w2x3y4z5a6b",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Prepare Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Data": {
      "main": [
        [
          {
            "node": "Claude API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude API Request": {
      "main": [
        [
          {
            "node": "Validate Analysis Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Analysis Result": {
      "main": [
        [
          {
            "node": "Check if Critical",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Critical": {
      "main": [
        [
          {
            "node": "Log Critical NDA",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Auto-Approved to TG Channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Auto-Approved to TG Channel": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Critical NDA": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-12-01T10:00:00.000Z",
  "versionId": "3"
}