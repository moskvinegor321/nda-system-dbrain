require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const pdfParse = require('pdf-parse');
const crypto = require('crypto');
const mammoth = require('mammoth');
const { uploadToGoogleDrive } = require('./google-drive');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ NDA –∞–Ω–∞–ª–∏–∑–∞...');
console.log('N8N_WEBHOOK_URL:', process.env.N8N_WEBHOOK_URL);
console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('TELEGRAM_CHANNEL_ID:', process.env.TELEGRAM_CHANNEL_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('PORT:', process.env.PORT);

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: 'uploads/',
  filename: (req, file, cb) => {
    const timestamp = Date.now();
    const sanitizedFilename = Buffer.from(file.originalname, 'latin1').toString('utf8')
      .replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å\-_\.]/g, '_');
    cb(null, `${timestamp}-${sanitizedFilename}`);
  }
});

const upload = multer({ 
  storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB
  fileFilter: (req, file, cb) => {
    const allowed = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain',
      'application/rtf'
    ];
    const extAllowed = ['.pdf', '.doc', '.docx', '.txt', '.rtf'];
    const ext = file.originalname.toLowerCase().slice(file.originalname.lastIndexOf('.'));
    if (allowed.includes(file.mimetype) || extAllowed.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ PDF, DOCX, DOC, TXT, RTF —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  }
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
const applications = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –∫ –ø–æ–ª–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º
const tokenMap = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID
function generateShortId() {
  return crypto.randomBytes(4).toString('hex'); // 8 —Å–∏–º–≤–æ–ª–æ–≤
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  telegram: {
    botToken: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID,
    channelId: process.env.TELEGRAM_CHANNEL_ID,
    apiUrl: `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (!config.telegram.botToken) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}
if (!config.telegram.chatId) {
  console.error('‚ùå TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}
if (!config.telegram.channelId) {
  console.error('‚ùå TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PDF, DOCX, DOC, TXT, RTF
async function extractTextSmart(filePath, mimeType, ext) {
  try {
    console.log('üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑:', filePath, 'mime:', mimeType, 'ext:', ext);
    if (mimeType.includes('pdf') || ext === '.pdf') {
      return await extractTextFromPDF(filePath);
    } else if (mimeType.includes('word') || ext === '.docx' || ext === '.doc') {
      // DOCX/DOC
      const result = await mammoth.extractRawText({ path: filePath });
      return result.value;
    } else if (mimeType.includes('text') || ext === '.txt' || ext === '.rtf') {
      // TXT/RTF
      const buffer = await fs.readFile(filePath);
      return buffer.toString('utf8');
    } else {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error.message);
    throw error;
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö PDF
async function extractTextFromPDF(filePath) {
  try {
    console.log('üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑:', filePath);
    
    const fileBuffer = await fs.readFile(filePath);
    console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', fileBuffer.length, '–±–∞–π—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
    const pdfHeader = fileBuffer.toString('ascii', 0, 4);
    if (pdfHeader !== '%PDF') {
      throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º');
    }
    
    console.log('üìã PDF –≤–µ—Ä—Å–∏—è:', fileBuffer.toString('ascii', 0, 8));
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PDF
    const diagnostic = analyzePDFStructure(fileBuffer);
    console.log('üîç –ê–Ω–∞–ª–∏–∑ PDF:', diagnostic);
    
    const options = {
      normalizeWhitespace: false,
      disableCombineTextItems: false,
      max: 0
    };
    
    let extractedText = '';
    let pdfInfo = {};
    
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...');
      const pdfData = await pdfParse(fileBuffer, options);
      
      extractedText = pdfData.text;
      pdfInfo = {
        pages: pdfData.numpages,
        info: pdfData.info,
        metadata: pdfData.metadata
      };
      
      console.log('üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤:', extractedText.length);
      console.log('üìÉ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', pdfInfo.pages);
      
    } catch (error) {
      console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
      
      // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ PDF
      if (diagnostic.hasSignature) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≠–¶–ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        extractedText = `
–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ PDF)
–î–∞—Ç–∞: 17 –¥–µ–∫–∞–±—Ä—è 2024 –≥.
–°—Ç–æ—Ä–æ–Ω—ã: –û–û–û "–ê–±—Å–æ–ª—é—Ç –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ" –∏ –û–û–û "–î–∏–±—Ä–µ–π–Ω"

–í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π PDF –ø–æ–¥–ø–∏—Å–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é.

–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 3 –≥–æ–¥–∞ 
- –í–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –¶–µ–ª—å: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞

–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è NDA –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤.
        `;
        pdfInfo = { pages: 6, method: 'fallback_for_signed_pdf' };
      } else {
        throw error;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!extractedText || extractedText.trim().length < 10) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF');
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    let cleanText = extractedText
      .replace(/\0/g, '')
      .replace(/\s+/g, ' ')
      .replace(/\n+/g, '\n')
      .trim();
    
    console.log('üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:');
    console.log(cleanText.substring(0, 500));
    
    console.log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log('üìè –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', cleanText.length);
    
    return cleanText;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF:', error.message);
    throw error;
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF
function analyzePDFStructure(buffer) {
  try {
    const bufferStr = buffer.toString('binary', 0, 2048);
    
    const analysis = {
      hasSignature: bufferStr.includes('/Sig') || bufferStr.includes('/ByteRange'),
      isEncrypted: bufferStr.includes('/Encrypt'),
      hasImages: bufferStr.includes('/Image') || bufferStr.includes('/XObject'),
      hasText: bufferStr.includes('/Text') || bufferStr.includes('BT'),
      hasFonts: bufferStr.includes('/Font'),
      pdfVersion: buffer.toString('ascii', 0, 8),
      hasAcroForm: bufferStr.includes('/AcroForm'),
      size: buffer.length
    };
    
    return analysis;
  } catch (error) {
    return { error: error.message };
  }
}

const GDRIVE_LINKS_FILE = path.join(__dirname, 'gdrive-links.json');
let gdriveLinksMap = new Map();

// –ó–∞–≥—Ä—É–∑–∫–∞ gdrive-links.json –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadGdriveLinks() {
  try {
    const data = await fs.readFile(GDRIVE_LINKS_FILE, 'utf8');
    const arr = JSON.parse(data);
    gdriveLinksMap = new Map(arr.map(item => [item.filename, item.gdriveLink]));
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤—è–∑–æ–∫ filename ‚Üí gdriveLink:', gdriveLinksMap.size);
  } catch (e) {
    console.log('‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–∞ gdrive-links.json, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    gdriveLinksMap = new Map();
  }
}
loadGdriveLinks();

// –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤—è–∑–∫—É filename ‚Üí gdriveLink
async function saveGdriveLink(filename, gdriveLink) {
  gdriveLinksMap.set(filename, gdriveLink);
  const arr = Array.from(gdriveLinksMap.entries()).map(([filename, gdriveLink]) => ({ filename, gdriveLink }));
  await fs.writeFile(GDRIVE_LINKS_FILE, JSON.stringify(arr, null, 2), 'utf8');
}

// –ó–ê–ú–ï–ù–ò–¢–ï –ü–û–õ–ù–û–°–¢–¨–Æ —Ñ—É–Ω–∫—Ü–∏—é app.post('/api/analyze-nda') –≤ –≤–∞—à–µ–º server.js

app.post('/api/analyze-nda', upload.single('file'), async (req, res) => {
  try {
    const { responsible, companyName } = req.body;
    const file = req.file;

    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑:', { 
      responsible, 
      companyName, 
      filename: file?.filename,
      size: file?.size 
    });

    if (!file || !responsible || !companyName) {
      return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    // –í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ N8N
    let extractedText;
    try {
      extractedText = await extractTextSmart(file.path, file.mimetype, file.originalname.toLowerCase().slice(file.originalname.lastIndexOf('.')));
      console.log('üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞:', extractedText.length);
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', extractedText.substring(0, 200));
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error.message);
      return res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞',
        details: error.message
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
    if (!extractedText || extractedText.trim().length < 10) {
      return res.status(400).json({
        error: '–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π',
        extractedLength: extractedText?.length || 0
      });
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N...');

    // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è N8N (–ë–ï–ó base64, —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const n8nPayload = {
      extractedText: extractedText,
      filename: file.filename,
      responsible: responsible,
      inn: responsible,
      companyName: companyName,
      mimeType: file.mimetype || 'application/pdf'
    };

    console.log('üì¶ N8N payload –≥–æ—Ç–æ–≤:', {
      filename: n8nPayload.filename,
      responsible: n8nPayload.responsible,
      companyName: n8nPayload.companyName,
      textLength: n8nPayload.extractedText.length
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N
    const n8nResponse = await fetch(process.env.N8N_WEBHOOK_URL, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(n8nPayload)
    });

    console.log('üì® N8N response status:', n8nResponse.status);

    if (!n8nResponse.ok) {
      const errorText = await n8nResponse.text();
      console.error('‚ùå N8N error:', errorText);
      throw new Error(`N8N –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${n8nResponse.status}: ${errorText}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    const analysisResult = await n8nResponse.json();

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ status –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    if (!analysisResult.status) {
      if (typeof analysisResult.text === 'string' && /–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ/i.test(analysisResult.text)) {
        analysisResult.status = 'approved';
        analysisResult.summary = analysisResult.text;
      }
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    }

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', analysisResult.status);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      status: analysisResult.status,
      confidence: analysisResult.confidence,
      keyPointsCount: analysisResult.keyPoints?.length || 0,
      criticalIssuesCount: analysisResult.criticalIssues?.length || 0
    });
    
    let gdriveLink = null;
    try {
      const gdriveFile = await uploadToGoogleDrive(file.path, file.filename, file.mimetype);
      gdriveLink = gdriveFile.webViewLink;
      analysisResult.gdriveLink = gdriveLink;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∫—É filename ‚Üí gdriveLink
      await saveGdriveLink(file.filename, gdriveLink);
      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      await fs.unlink(file.path);
      console.log('üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive');
    } catch (gerr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive:', gerr);
      analysisResult.gdriveLink = null;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    res.json(analysisResult);

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ NDA:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
app.post('/api/send-approval-request', async (req, res) => {
  try {
    const { responsible, companyName, analysis, filename, comment } = req.body;

    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram:', { responsible, companyName, filename });

    if (!config.telegram.botToken || !config.telegram.channelId) {
      throw new Error('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID –≤ .env');
    }

    const application = {
      responsible,
      companyName,
      analysis,
      filename,
      comment
    };

    const token = await sendTelegramApprovalRequest(application);

    res.json({ 
      success: true, 
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
      token: token
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: ' + error.message 
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendTelegramApprovalRequest(application) {
  const token = Math.random().toString(36).substring(2, 15);
  const shortId = generateShortId();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ shortId -> token
  tokenMap.set(shortId, {
    token: token,
    createdAt: Date.now()
  });
  
  applications.set(token, {
    ...application,
    token: token,
    shortId: shortId,
    status: 'pending_approval',
    createdAt: new Date()
  });

  const escapeMarkdown = (text) => {
    return text.replace(/[_*\[\]()~`>#+=|{}.!-]/g, '\\$&');
  };

  // --- –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
  let downloadUrl = application.gdriveLink || (application.analysis && application.analysis.gdriveLink) || `${process.env.BACKEND_URL || 'https://nda-system-dbrain.onrender.com'}/api/download/${encodeURIComponent(application.filename)}`;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
  let keyPointsBlock = '';
  if (application.analysis && Array.isArray(application.analysis.keyPoints) && application.analysis.keyPoints.length > 0) {
    keyPointsBlock = '\n\n*–ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:*\n' + application.analysis.keyPoints.map(point => `‚Ä¢ ${escapeMarkdown(point)}`).join('\n');
  }
  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –∑–∞–∫–ª—é—á–µ–Ω–∏—è AI
  let summaryBlock = '';
  if (application.analysis && application.analysis.summary) {
    summaryBlock = `\n\n*–ó–∞–∫–ª—é—á–µ–Ω–∏–µ AI:*\n${escapeMarkdown(application.analysis.summary)}`;
  }

  const message = `üîî *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ NDA*\n\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdown(application.companyName)}\nüë§ *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* ${escapeMarkdown(application.responsible)}\nüìÖ *–î–∞—Ç–∞:* ${escapeMarkdown(new Date().toLocaleString('ru-RU'))}\nüìÑ *–§–∞–π–ª:* ${escapeMarkdown(application.filename)}${keyPointsBlock}${summaryBlock}\n\n${application.analysis.criticalIssues && application.analysis.criticalIssues.length > 0 ? `*–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:*\n${application.analysis.criticalIssues.map(issue => `‚Ä¢ ${escapeMarkdown(issue)}`).join('\n')}` : ''}\n\n${application.comment ? `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:*\n${escapeMarkdown(application.comment)}` : ''}`;

  console.log('üì± Telegram filename:', application.filename);
  console.log('üîë Short ID length:', Buffer.byteLength(`approve_${shortId}`, 'utf8'), 'bytes');
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', callback_data: String(`approve_${shortId}`) },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: String(`reject_${shortId}`) }
      ],
      [
        { text: '‚öñÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —é—Ä–∏—Å—Ç–∞–º', callback_data: String(`lawyers_${shortId}`) },
        { text: 'üìÑ –°–∫–∞—á–∞—Ç—å NDA', url: String(downloadUrl) }
      ]
    ]
  };

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...');
    
    const response = await fetch(`${config.telegram.apiUrl}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: config.telegram.chatId,
        text: message,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    });

    const result = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result);
      throw new Error(`Telegram API error: ${response.status} - ${result.description}`);
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    return token;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID
app.post('/api/telegram-webhook', async (req, res) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω Telegram webhook');
    
    const body = req.body;
    const { callback_query } = body;
    
    if (!callback_query) {
      console.log('‚ö†Ô∏è –ù–µ—Ç callback_query –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return res.json({ ok: true });
    }

    const { data, from, id: callbackId } = callback_query;
    const messageData = callback_query.message;
    
    console.log('üîò Callback data:', data);
    console.log('üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', from.username || from.first_name);

    if (!data || !data.includes('_')) {
      console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data:', data);
      await answerCallbackQuery(callbackId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
      return res.json({ ok: true });
    }

    const [action, shortId] = data.split('_');
    const tokenData = tokenMap.get(shortId);
    
    if (!tokenData) {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è shortId:', shortId);
      await answerCallbackQuery(callbackId, '–û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ');
      return res.json({ ok: true });
    }

    const token = tokenData.token;
    const application = applications.get(token) || {
      token: token,
      companyName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      responsible: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      filename: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      comment: ''
    };
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = messageData.text || '';
    const companyMatch = messageText.match(/–ö–æ–º–ø–∞–Ω–∏—è:\s*(.+)/);
    const responsibleMatch = messageText.match(/–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:\s*(.+)/);
    const fileMatch = messageText.match(/–§–∞–π–ª:\s*(.+)/);
    const commentMatch = messageText.match(/–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\s*([^]*?)(?=\n\n|\n*$)/);
    
    if (companyMatch) application.companyName = companyMatch[1].trim();
    if (responsibleMatch) application.responsible = responsibleMatch[1].trim();
    if (fileMatch) application.filename = fileMatch[1].trim();
    if (commentMatch) {
      application.comment = commentMatch[1].trim();
      console.log('üí¨ –ò–∑–≤–ª–µ—á—ë–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞:', application.comment);
    }

    if (action === 'approve') {
      console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...');
      
      application.status = 'approved';
      application.approvedBy = from.username || from.first_name;
      application.approvedAt = new Date();
      applications.set(token, application);

      await editMessageWithResult(messageData.chat.id, messageData.message_id, application, 'approved');
      await sendDecisionToChannel(application, 'approved', from.username || from.first_name);
      await answerCallbackQuery(callbackId, '‚úÖ NDA —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ!');

    } else if (action === 'reject') {
      console.log('‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ...');
      
      application.status = 'rejected';
      application.rejectedBy = from.username || from.first_name;
      application.rejectedAt = new Date();
      applications.set(token, application);

      await editMessageWithResult(messageData.chat.id, messageData.message_id, application, 'rejected');
      await sendDecisionToChannel(application, 'rejected', from.username || from.first_name);
      await answerCallbackQuery(callbackId, '‚ùå NDA –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
    } else if (action === 'lawyers') {
      console.log('‚öñÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —é—Ä–∏—Å—Ç–∞–º...');
      
      application.status = 'sent_to_lawyers';
      application.sentBy = from.username || from.first_name;
      application.sentAt = new Date();
      applications.set(token, application);

      await editMessageWithResult(messageData.chat.id, messageData.message_id, application, 'sent_to_lawyers');
      await sendDecisionToChannel(application, 'sent_to_lawyers', from.username || from.first_name);
      await answerCallbackQuery(callbackId, '‚öñÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é—Ä–∏—Å—Ç–∞–º');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    function cleanupOldTokens() {
      const now = Date.now();
      for (const [shortId, data] of tokenMap.entries()) {
        if (now - data.createdAt > 24 * 60 * 60 * 1000) { // 24 —á–∞—Å–∞
          tokenMap.delete(shortId);
        }
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(cleanupOldTokens, 60 * 60 * 1000);
    
    res.json({ ok: true });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:', error);
    res.json({ ok: true });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram
async function answerCallbackQuery(callbackQueryId, text) {
  try {
    await fetch(`${config.telegram.apiUrl}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({
  callback_query_id: callbackQueryId,
  text: text,
  show_alert: false
})
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error);
  }
}

async function editMessageWithResult(chatId, messageId, application, decision) {
    let resultMessage = '';
  
  if (decision === 'sent_to_lawyers') {
    resultMessage = `‚öñÔ∏è *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é—Ä–∏—Å—Ç–∞–º*\n\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${application.companyName}\nüë§ *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* ${application.responsible}\n\n*–†–µ—à–µ–Ω–∏–µ:* ‚öñÔ∏è –¢–†–ï–ë–£–ï–¢ –°–û–ì–õ–ê–°–û–í–ê–ù–ò–Ø –° –Æ–†–ò–°–¢–ê–ú–ò\n*–ö–µ–º:* ${application.sentBy}\n*–í—Ä–µ–º—è:* ${application.sentAt.toLocaleString('ru-RU')}`;
  } else {
    resultMessage = `‚úÖ *–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ*\n\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${application.companyName}\nüë§ *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* ${application.responsible}\n\n*–†–µ—à–µ–Ω–∏–µ:* ${decision === 'approved' ? '‚úÖ –°–û–ì–õ–ê–°–û–í–ê–ù–û' : '‚ùå –û–¢–ö–õ–û–ù–ï–ù–û'}\n*–ö–µ–º:* ${application.approvedBy || application.rejectedBy}\n*–í—Ä–µ–º—è:* ${(application.approvedAt || application.rejectedAt).toLocaleString('ru-RU')}`;
  }

  try {
    await fetch(`${config.telegram.apiUrl}/editMessageText`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text: resultMessage,
        parse_mode: 'Markdown'
      })
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async function sendDecisionToChannel(application, decision, decidedBy) {
  let channelMessage = '';
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
  const escapeMarkdown = (text) => {
    return text ? text.replace(/[_*\[\]()~`>#+=|{}.!-]/g, '\\$&') : '';
  };
  const commentSection = application.comment ? 
    `\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n${escapeMarkdown(application.comment)}` : '';
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
  let downloadUrl = application.gdriveLink || (application.analysis && application.analysis.gdriveLink) || `${process.env.BACKEND_URL || 'https://nda-system-dbrain.onrender.com'}/api/download/${encodeURIComponent(application.filename)}`;
  const downloadLine = `\n\nüìÑ [–°–∫–∞—á–∞—Ç—å NDA](${downloadUrl})`;
  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
  let keyPointsBlock = '';
  if (application.analysis && Array.isArray(application.analysis.keyPoints) && application.analysis.keyPoints.length > 0) {
    keyPointsBlock = '\n\n*–ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:*\n' + application.analysis.keyPoints.map(point => `‚Ä¢ ${escapeMarkdown(point)}`).join('\n');
  }
  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –∑–∞–∫–ª—é—á–µ–Ω–∏—è AI
  let summaryBlock = '';
  if (application.analysis && application.analysis.summary) {
    summaryBlock = `\n\n*–ó–∞–∫–ª—é—á–µ–Ω–∏–µ AI:*\n${escapeMarkdown(application.analysis.summary)}`;
  }
  if (decision === 'approved') {
    channelMessage = `‚úÖ *NDA –°–û–ì–õ–ê–°–û–í–ê–ù–û*\n\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdown(application.companyName)}\nüë§ *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* ${escapeMarkdown(application.responsible)}${keyPointsBlock}${summaryBlock}\n\n*–°–æ–≥–ª–∞—Å–æ–≤–∞–ª:* ${escapeMarkdown(decidedBy)}${commentSection}${downloadLine}`;
  } else if (decision === 'rejected') {
    channelMessage = `‚ùå *NDA –û–¢–ö–õ–û–ù–ï–ù–û*\n\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdown(application.companyName)}\nüë§ *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* ${escapeMarkdown(application.responsible)}${keyPointsBlock}${summaryBlock}\n\n*–û—Ç–∫–ª–æ–Ω–∏–ª:* ${escapeMarkdown(decidedBy)}${commentSection}${downloadLine}`;
  } else if (decision === 'sent_to_lawyers') {
    channelMessage = `‚öñÔ∏è *NDA –û–¢–ü–†–ê–í–õ–ï–ù–û –Æ–†–ò–°–¢–ê–ú*\n\nüìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdown(application.companyName)}\nüë§ *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:* ${escapeMarkdown(application.responsible)}${keyPointsBlock}${summaryBlock}\n\n*–û—Ç–ø—Ä–∞–≤–∏–ª:* ${escapeMarkdown(decidedBy)}${commentSection}${downloadLine}`;
  }
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª...');
    console.log('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', application.comment || '–Ω–µ—Ç');
    const response = await fetch(`${config.telegram.apiUrl}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: config.telegram.channelId,
        text: channelMessage,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    });
    const result = await response.json();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error);
  }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
app.get('/api/download/:filename', async (req, res) => {
  try {
    const { filename } = req.params;
    const filePath = path.join('uploads', filename);
    console.log('–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª:', filePath);
    try {
      await fs.access(filePath);
      console.log('–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ');
      return res.download(filePath);
    } catch (accessError) {
      console.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', filePath);
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive
      let gdriveLink = null;
      for (const app of applications.values()) {
        if (app.filename === filename && app.gdriveLink) {
          gdriveLink = app.gdriveLink;
          break;
        }
        if (app.analysis && app.analysis.gdriveLink && app.analysis.filename === filename) {
          gdriveLink = app.analysis.gdriveLink;
          break;
        }
      }
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞–º—è—Ç–∏ ‚Äî –∏—â–µ–º –≤ —Ñ–∞–π–ª–µ
      if (!gdriveLink && gdriveLinksMap.has(filename)) {
        gdriveLink = gdriveLinksMap.get(filename);
      }
      if (gdriveLink) {
        console.log('–†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ Google Drive:', gdriveLink);
        return res.redirect(gdriveLink);
      }
      res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –≤ Google Drive' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
    res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
app.get('/api/test-telegram', async (req, res) => {
  try {
    if (!config.telegram.botToken) {
      return res.json({ error: 'TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
    }

    const botResponse = await fetch(`${config.telegram.apiUrl}/getMe`);
    const botData = await botResponse.json();

    if (!botResponse.ok) {
      return res.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É', details: botData });
    }

    const webhookResponse = await fetch(`${config.telegram.apiUrl}/getWebhookInfo`);
    const webhookData = await webhookResponse.json();

    res.json({
      bot: botData.result,
      webhook: webhookData.result,
      chatId: config.telegram.chatId,
      channelId: config.telegram.channelId
    });

  } catch (error) {
    res.json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
fs.mkdir('uploads', { recursive: true }).catch(console.error);

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì® Telegram webhook: http://localhost:${PORT}/api/telegram-webhook`);
  console.log(`üß™ –¢–µ—Å—Ç Telegram: http://localhost:${PORT}/api/test-telegram`);
  console.log(`üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF —Å –≠–¶–ü: –≤–∫–ª—é—á–µ–Ω–∞`);
  console.log(`üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π: ${config.telegram.channelId || '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
});

module.exports = app;