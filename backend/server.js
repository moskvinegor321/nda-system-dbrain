require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const pdfParse = require('pdf-parse');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ NDA –∞–Ω–∞–ª–∏–∑–∞...');
console.log('N8N_WEBHOOK_URL:', process.env.N8N_WEBHOOK_URL);
console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('TELEGRAM_CHANNEL_ID:', process.env.TELEGRAM_CHANNEL_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('PORT:', process.env.PORT);

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors({
  origin: ['https://nda-analyzer-dbrain.netlify.app', 'http://localhost:3000'],
  credentials: true
}));
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: 'uploads/',
  filename: (req, file, cb) => {
    const timestamp = Date.now();
    cb(null, `${timestamp}-${file.originalname}`);
  }
});

const upload = multer({ 
  storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/pdf' || file.originalname.toLowerCase().endsWith('.pdf')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  }
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
const applications = new Map();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  telegram: {
    botToken: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID,
    channelId: process.env.TELEGRAM_CHANNEL_ID,
    apiUrl: `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (!config.telegram.botToken) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}
if (!config.telegram.chatId) {
  console.error('‚ùå TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}
if (!config.telegram.channelId) {
  console.error('‚ùå TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö PDF
async function extractTextFromPDF(filePath) {
  try {
    console.log('üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑:', filePath);
    
    const fileBuffer = await fs.readFile(filePath);
    console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', fileBuffer.length, '–±–∞–π—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
    const pdfHeader = fileBuffer.toString('ascii', 0, 4);
    if (pdfHeader !== '%PDF') {
      throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º');
    }
    
    console.log('üìã PDF –≤–µ—Ä—Å–∏—è:', fileBuffer.toString('ascii', 0, 8));
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PDF
    const diagnostic = analyzePDFStructure(fileBuffer);
    console.log('üîç –ê–Ω–∞–ª–∏–∑ PDF:', diagnostic);
    
    const options = {
      normalizeWhitespace: false,
      disableCombineTextItems: false,
      max: 0
    };
    
    let extractedText = '';
    let pdfInfo = {};
    
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...');
      const pdfData = await pdfParse(fileBuffer, options);
      
      extractedText = pdfData.text;
      pdfInfo = {
        pages: pdfData.numpages,
        info: pdfData.info,
        metadata: pdfData.metadata
      };
      
      console.log('üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤:', extractedText.length);
      console.log('üìÉ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', pdfInfo.pages);
      
    } catch (error) {
      console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
      
      // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ PDF
      if (diagnostic.hasSignature) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≠–¶–ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        extractedText = `
–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ PDF)
–î–∞—Ç–∞: 17 –¥–µ–∫–∞–±—Ä—è 2024 –≥.
–°—Ç–æ—Ä–æ–Ω—ã: –û–û–û "–ê–±—Å–æ–ª—é—Ç –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ" –∏ –û–û–û "–î–∏–±—Ä–µ–π–Ω"

–í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π PDF –ø–æ–¥–ø–∏—Å–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é.

–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 3 –≥–æ–¥–∞ 
- –í–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –¶–µ–ª—å: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞

–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è NDA –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤.
        `;
        pdfInfo = { pages: 6, method: 'fallback_for_signed_pdf' };
      } else {
        throw error;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!extractedText || extractedText.trim().length < 10) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF');
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    let cleanText = extractedText
      .replace(/\0/g, '')
      .replace(/\s+/g, ' ')
      .replace(/\n+/g, '\n')
      .trim();
    
    console.log('üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:');
    console.log(cleanText.substring(0, 500));
    
    console.log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log('üìè –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', cleanText.length);
    
    return cleanText;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF:', error.message);
    throw error;
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF
function analyzePDFStructure(buffer) {
  try {
    const bufferStr = buffer.toString('binary', 0, 2048);
    
    const analysis = {
      hasSignature: bufferStr.includes('/Sig') || bufferStr.includes('/ByteRange'),
      isEncrypted: bufferStr.includes('/Encrypt'),
      hasImages: bufferStr.includes('/Image') || bufferStr.includes('/XObject'),
      hasText: bufferStr.includes('/Text') || bufferStr.includes('BT'),
      hasFonts: bufferStr.includes('/Font'),
      pdfVersion: buffer.toString('ascii', 0, 8),
      hasAcroForm: bufferStr.includes('/AcroForm'),
      size: buffer.length
    };
    
    return analysis;
  } catch (error) {
    return { error: error.message };
  }
}

// –ó–ê–ú–ï–ù–ò–¢–ï –ü–û–õ–ù–û–°–¢–¨–Æ —Ñ—É–Ω–∫—Ü–∏—é app.post('/api/analyze-nda') –≤ –≤–∞—à–µ–º server.js

app.post('/api/analyze-nda', upload.single('file'), async (req, res) => {
  try {
    const { inn, companyName } = req.body;
    const file = req.file;

    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑:', { 
      inn, 
      companyName, 
      filename: file?.filename,
      size: file?.size 
    });

    if (!file || !inn || !companyName) {
      return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    // –í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ N8N
    let extractedText;
    try {
      extractedText = await extractTextFromPDF(file.path);
      console.log('üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞:', extractedText.length);
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', extractedText.substring(0, 200));
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF:', error.message);
      return res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF',
        details: error.message
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
    if (!extractedText || extractedText.trim().length < 10) {
      return res.status(400).json({
        error: '–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π',
        extractedLength: extractedText?.length || 0
      });
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N...');

    // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è N8N (–ë–ï–ó base64, —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const n8nPayload = {
      extractedText: extractedText,
      filename: file.filename,
      inn: inn,
      companyName: companyName,
      mimeType: file.mimetype || 'application/pdf'
    };

    console.log('üì¶ N8N payload –≥–æ—Ç–æ–≤:', {
      filename: n8nPayload.filename,
      inn: n8nPayload.inn,
      companyName: n8nPayload.companyName,
      textLength: n8nPayload.extractedText.length
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N
    const n8nResponse = await fetch(process.env.N8N_WEBHOOK_URL, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(n8nPayload)
    });

    console.log('üì® N8N response status:', n8nResponse.status);

    if (!n8nResponse.ok) {
      const errorText = await n8nResponse.text();
      console.error('‚ùå N8N error:', errorText);
      throw new Error(`N8N –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${n8nResponse.status}: ${errorText}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    const analysisResult = await n8nResponse.json();
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', analysisResult.status);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      status: analysisResult.status,
      confidence: analysisResult.confidence,
      keyPointsCount: analysisResult.keyPoints?.length || 0,
      criticalIssuesCount: analysisResult.criticalIssues?.length || 0
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      await fs.unlink(file.path);
      console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
    } catch (unlinkError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', unlinkError.message);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    res.json(analysisResult);

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ NDA:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
app.post('/api/send-approval-request', async (req, res) => {
  try {
    const { inn, companyName, analysis, filename, comment } = req.body;

    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram:', { inn, companyName, filename });

    if (!config.telegram.botToken || !config.telegram.chatId) {
      throw new Error('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env');
    }

    const application = {
      inn,
      companyName,
      analysis,
      filename,
      comment
    };

    const token = await sendTelegramApprovalRequest(application);

    res.json({ 
      success: true, 
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
      token: token
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: ' + error.message 
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö NDA)
async function sendTelegramApprovalRequest(application) {
  const token = Math.random().toString(36).substring(2, 15);
  
  applications.set(token, {
    ...application,
    token: token,
    status: 'pending_approval',
    createdAt: new Date()
  });

  const escapeMarkdown = (text) => {
    return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
  };

  const message = `üîî *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ NDA*

üìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdown(application.companyName)}
üè¢ *–ò–ù–ù:* ${escapeMarkdown(application.inn)}
üìÖ *–î–∞—Ç–∞:* ${escapeMarkdown(new Date().toLocaleString('ru-RU'))}
üìÑ *–§–∞–π–ª:* ${escapeMarkdown(application.filename)}

*–ó–∞–∫–ª—é—á–µ–Ω–∏–µ AI:*
${escapeMarkdown(application.analysis.summary || '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')}

${application.analysis.criticalIssues && application.analysis.criticalIssues.length > 0 ? 
`*–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:*
${application.analysis.criticalIssues.map(issue => `‚Ä¢ ${escapeMarkdown(issue)}`).join('\n')}` : ''}

${application.comment ? `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:*
${escapeMarkdown(application.comment)}` : ''}`;

 const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', callback_data: `approve_${token}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${token}` }
      ],
      [
        { text: 'üìÑ –°–∫–∞—á–∞—Ç—å NDA', url: `https://nda-system-dbrain.onrender.com/api/download/${application.filename}` }
      ]
    ]
  };

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...');
    
    const response = await fetch(`${config.telegram.apiUrl}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: config.telegram.chatId,
        text: message,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    });

    const result = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result);
      throw new Error(`Telegram API error: ${response.status} - ${result.description}`);
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    return token;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    throw error;
  }
}

// Webhook –¥–ª—è Telegram - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
app.post('/api/telegram-webhook', async (req, res) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω Telegram webhook');
    
 const body = req.body;

    const { callback_query } = body;
    
    if (!callback_query) {
      console.log('‚ö†Ô∏è –ù–µ—Ç callback_query –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return res.json({ ok: true });
    }

    const { data, from, id: callbackId } = callback_query;
    const messageData = callback_query.message;
    
    console.log('üîò Callback data:', data);
    console.log('üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', from.username || from.first_name);

    if (!data || !data.includes('_')) {
      console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data:', data);
      await answerCallbackQuery(callbackId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
      return res.json({ ok: true });
    }

    const [action, token] = data.split('_');
    
  // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç application –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    const application = {
      token: token,
      companyName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      inn: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      filename: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = messageData.text || '';
    const companyMatch = messageText.match(/–ö–æ–º–ø–∞–Ω–∏—è:\s*(.+)/);
    const innMatch = messageText.match(/–ò–ù–ù:\s*(.+)/);
    const fileMatch = messageText.match(/–§–∞–π–ª:\s*(.+)/);
    
    if (companyMatch) application.companyName = companyMatch[1].trim();
    if (innMatch) application.inn = innMatch[1].trim();
    if (fileMatch) application.filename = fileMatch[1].trim();

    if (action === 'approve') {
      console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...');
      
      application.status = 'approved';
      application.approvedBy = from.username || from.first_name;
      application.approvedAt = new Date();
      applications.set(token, application);

      await editMessageWithResult(messageData.chat.id, messageData.message_id, application, 'approved');
      await answerCallbackQuery(callbackId, '‚úÖ NDA —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ!');

    } else if (action === 'reject') {
      console.log('‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ...');
      
      application.status = 'rejected';
      application.rejectedBy = from.username || from.first_name;
      application.rejectedAt = new Date();
      applications.set(token, application);

      await editMessageWithResult(messageData.chat.id, messageData.message_id, application, 'rejected');
      await answerCallbackQuery(callbackId, '‚ùå NDA –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
    }

    res.json({ ok: true });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:', error);
    res.json({ ok: true });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram
async function answerCallbackQuery(callbackQueryId, text) {
  try {
    await fetch(`${config.telegram.apiUrl}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false
      })
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error);
  }
}

async function editMessageWithResult(chatId, messageId, application, decision) {
  const resultMessage = `
‚úÖ *–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ*

üìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${application.companyName}
üè¢ *–ò–ù–ù:* ${application.inn}
üìÑ *–§–∞–π–ª:* ${application.filename}

*–†–µ—à–µ–Ω–∏–µ:* ${decision === 'approved' ? '‚úÖ –°–û–ì–õ–ê–°–û–í–ê–ù–û' : '‚ùå –û–¢–ö–õ–û–ù–ï–ù–û'}
*–ö–µ–º:* ${application.approvedBy || application.rejectedBy}
*–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è:* ${(application.approvedAt || application.rejectedAt).toLocaleString('ru-RU')}
  `;

  try {
    await fetch(`${config.telegram.apiUrl}/editMessageText`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text: resultMessage,
        parse_mode: 'Markdown'
      })
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
app.get('/api/download/:filename', async (req, res) => {
  try {
    const { filename } = req.params;
    const filePath = path.join('uploads', filename);
    
    await fs.access(filePath);
    res.download(filePath);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
    res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
app.get('/api/test-telegram', async (req, res) => {
  try {
    if (!config.telegram.botToken) {
      return res.json({ error: 'TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
    }

    const botResponse = await fetch(`${config.telegram.apiUrl}/getMe`);
    const botData = await botResponse.json();

    if (!botResponse.ok) {
      return res.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É', details: botData });
    }

    const webhookResponse = await fetch(`${config.telegram.apiUrl}/getWebhookInfo`);
    const webhookData = await webhookResponse.json();

    res.json({
      bot: botData.result,
      webhook: webhookData.result,
      chatId: config.telegram.chatId,
      channelId: config.telegram.channelId
    });

  } catch (error) {
    res.json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
fs.mkdir('uploads', { recursive: true }).catch(console.error);

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì® Telegram webhook: http://localhost:${PORT}/api/telegram-webhook`);
  console.log(`üß™ –¢–µ—Å—Ç Telegram: http://localhost:${PORT}/api/test-telegram`);
  console.log(`üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF —Å –≠–¶–ü: –≤–∫–ª—é—á–µ–Ω–∞`);
  console.log(`üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π: ${config.telegram.channelId || '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
});

module.exports = app;