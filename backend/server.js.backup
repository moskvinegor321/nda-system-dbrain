require('dotenv').config();
// server.js - Express –±—ç–∫–µ–Ω–¥
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const nodemailer = require('nodemailer');
const pdfParse = require('pdf-parse');

console.log('N8N_WEBHOOK_URL:', process.env.N8N_WEBHOOK_URL);
console.log('PORT:', process.env.PORT);

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: 'uploads/',
  filename: (req, file, cb) => {
    const timestamp = Date.now();
    cb(null, `${timestamp}-${file.originalname}`);
  }
});
const upload = multer({ storage });

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–æ–∫
const applications = new Map();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
const config = {
  n8n: {
    baseUrl: process.env.N8N_BASE_URL || 'http://localhost:5678',
    webhookUrl: '/webhook/nda-analysis'
  },
  pipedrive: {
    apiKey: process.env.PIPEDRIVE_API_KEY,
    baseUrl: 'https://api.pipedrive.com/v1'
  },
  telegram: {
    botToken: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID
  },
  email: {
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: true,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS
    }
  }
};

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

// 1. –ê–Ω–∞–ª–∏–∑ NDA —á–µ—Ä–µ–∑ n8n
// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ NDA
// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ NDA
// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ NDA
app.post('/api/analyze-nda', upload.single('file'), async (req, res) => {
  try {
    const { inn, companyName } = req.body;
    const file = req.file;

    if (!file || !inn || !companyName) {
      return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    console.log('Processing file:', file.filename);

    let extractedText = '';

    try {
      // –ü—Ä–æ–±—É–µ–º pdf-parse
      const fileBuffer = await fs.readFile(file.path);
      const pdfData = await pdfParse(fileBuffer);
      extractedText = pdfData.text;
      console.log('pdf-parse result length:', extractedText.length);
    } catch (error) {
      console.log('pdf-parse failed:', error.message);
      
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      extractedText = `
–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –û–û–û "–ê–±—Å–æ–ª—é—Ç –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ" –∏ –û–û–û "–î–∏–±—Ä–µ–π–Ω".
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 3 –≥–æ–¥–∞.
–í–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω.
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞.
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è NDA –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤.
      `;
      console.log('Using fallback text for testing');
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (!extractedText || extractedText.trim().length === 0) {
      extractedText = `
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–∏.
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 3 –≥–æ–¥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ).
–í–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω.
–®—Ç—Ä–∞—Ñ—ã: –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤.
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
      `;
      console.log('Using emergency fallback text');
    }

    console.log('Final extracted text length:', extractedText.length);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N
    const n8nResponse = await fetch(process.env.N8N_WEBHOOK_URL, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        extractedText: extractedText,
        inn: inn,
        companyName: companyName,
        filename: file.filename
      })
    });

    console.log('N8N response status:', n8nResponse.status);

    if (!n8nResponse.ok) {
      const errorText = await n8nResponse.text();
      throw new Error(`N8N returned ${n8nResponse.status}: ${errorText}`);
    }

    const analysisResult = await n8nResponse.json();
    res.json(analysisResult);

  } catch (error) {
    console.error('Error analyzing NDA:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message
    });
  }
});

// 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ Pipedrive
app.post('/api/pipedrive-update', async (req, res) => {
  try {
    const { inn, companyName, status, summary, keyPoints } = req.body;

    // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Pipedrive –ø–æ –ò–ù–ù
    const searchResponse = await fetch(
      `${config.pipedrive.baseUrl}/organizations/search?term=${inn}&api_token=${config.pipedrive.apiKey}`
    );
    const searchData = await searchResponse.json();

    let organizationId = null;
    if (searchData.data && searchData.data.items.length > 0) {
      organizationId = searchData.data.items[0].item.id;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É
    const noteText = `
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ NDA
–°—Ç–∞—Ç—É—Å: ${status === 'auto_approved' ? '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
–ö–æ–º–ø–∞–Ω–∏—è: ${companyName}
–ò–ù–ù: ${inn}

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ AI:
${summary}

–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
${keyPoints.map(point => `‚Ä¢ ${point}`).join('\n')}

–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
    `;

    const noteResponse = await fetch(
      `${config.pipedrive.baseUrl}/notes?api_token=${config.pipedrive.apiKey}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: noteText,
          org_id: organizationId,
          add_time: new Date().toISOString()
        })
      }
    );

    if (noteResponse.ok) {
      res.json({ success: true, message: '–ó–∞–ø–∏—Å–∞–Ω–æ –≤ Pipedrive' });
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Pipedrive');
    }

  } catch (error) {
    console.error('Error updating Pipedrive:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Pipedrive' });
  }
});

// 3. –û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
app.post('/api/send-approval-email', async (req, res) => {
  try {
    const { emails, token, inn, companyName, analysis } = req.body;

    const transporter = nodemailer.createTransporter(config.email);

    const approvalUrl = `${process.env.FRONTEND_URL}/approval/${token}`;
    
    const emailHtml = `
      <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ NDA</h2>
      <p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${companyName}</p>
      <p><strong>–ò–ù–ù:</strong> ${inn}</p>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</h3>
      <p>${analysis.summary}</p>
      
      <h4>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:</h4>
      <ul>
        ${analysis.criticalIssues.map(issue => `<li>${issue}</li>`).join('')}
      </ul>
      
      <p>
        <a href="${approvalUrl}" style="background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
          –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é
        </a>
      </p>
    `;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    applications.set(token, {
      ...applications.get(token) || {},
      token,
      inn,
      companyName,
      analysis,
      status: 'pending_approval',
      approvalEmails: emails
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞—Ç–∞–º
    await Promise.all(emails.map(email => 
      transporter.sendMail({
        from: process.env.SMTP_USER,
        to: email.trim(),
        subject: `–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ NDA - ${companyName}`,
        html: emailHtml
      })
    ));

    res.json({ success: true, message: 'Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' });

  } catch (error) {
    console.error('Error sending approval email:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email' });
  }
});

// 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
app.get('/api/approval/:token', async (req, res) => {
  try {
    const { token } = req.params;
    const application = applications.get(token);

    if (!application) {
      return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json(application);

  } catch (error) {
    console.error('Error getting approval data:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
  }
});

// 5. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
app.post('/api/admin-decision', async (req, res) => {
  try {
    const { token, decision } = req.body;
    const application = applications.get(token);

    if (!application) {
      return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    application.status = decision;
    application.decidedAt = new Date();
    applications.set(token, application);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await sendTelegramNotification(application, decision);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Pipedrive
    await updatePipedriveWithDecision(application, decision);

    res.json({ success: true, message: '–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' });

  } catch (error) {
    console.error('Error processing admin decision:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è' });
  }
});

// 6. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ NDA –¥–æ–∫—É–º–µ–Ω—Ç–∞
app.get('/api/download/:filename', async (req, res) => {
  try {
    const { filename } = req.params;
    const filePath = path.join('uploads', filename);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    await fs.access(filePath);
    
    res.download(filePath);

  } catch (error) {
    console.error('Error downloading file:', error);
    res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function sendTelegramNotification(application, decision) {
  try {
    const message = `
üîî *NDA ${decision === 'approved' ? '–°–û–ì–õ–ê–°–û–í–ê–ù–û' : '–û–¢–ö–õ–û–ù–ï–ù–û'}*

üìã *–ö–æ–º–ø–∞–Ω–∏—è:* ${application.companyName}
üè¢ *–ò–ù–ù:* ${application.inn}
üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}
‚úÖ *–†–µ—à–µ–Ω–∏–µ:* ${decision === 'approved' ? '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
    `;

    await fetch(`https://api.telegram.org/bot${config.telegram.botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: config.telegram.chatId,
        text: message,
        parse_mode: 'Markdown'
      })
    });

  } catch (error) {
    console.error('Error sending Telegram notification:', error);
  }
}

async function updatePipedriveWithDecision(application, decision) {
  try {
    const noteText = `
üîî –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ NDA
–ö–æ–º–ø–∞–Ω–∏—è: ${application.companyName}
–ò–ù–ù: ${application.inn}
–†–µ—à–µ–Ω–∏–µ: ${decision === 'approved' ? '–°–û–ì–õ–ê–°–û–í–ê–ù–û' : '–û–¢–ö–õ–û–ù–ï–ù–û'}

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ AI:
${application.analysis.summary}

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:
${application.analysis.criticalIssues.map(issue => `‚Ä¢ ${issue}`).join('\n')}

–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}
    `;

    // –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Ç–æ–¥—É)
    const searchResponse = await fetch(
      `${config.pipedrive.baseUrl}/organizations/search?term=${application.inn}&api_token=${config.pipedrive.apiKey}`
    );
    const searchData = await searchResponse.json();

    let organizationId = null;
    if (searchData.data && searchData.data.items.length > 0) {
      organizationId = searchData.data.items[0].item.id;
    }

    await fetch(
      `${config.pipedrive.baseUrl}/notes?api_token=${config.pipedrive.apiKey}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: noteText,
          org_id: organizationId
        })
      }
    );

  } catch (error) {
    console.error('Error updating Pipedrive with decision:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
fs.mkdir('uploads', { recursive: true }).catch(console.error);

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = app;